### POST create user
POST http://localhost:8080/api/users
Accept: application/json
Content-Type: application/json

{
    "email": "corey.kent@example.com",
    "firstName": "firstName1",
    "secondName": "secondName1",
    "displayName": "displayName1"
}

### POST update user
POST http://localhost:8080/api/users/230e62be-7c48-44b4-85d4-4b748b986496
Accept: application/json
Content-Type: application/json

{
    "firstName": "firstName2"
}

### delete user
DELETE http://localhost:8080/api/users/230e62be-7c48-44b4-85d4-4b748b986496
Accept: application/json
Content-Type: application/json



### GraphQL schema
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "operationName": "IntrospectionQuery",
  "query": "\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "
}


### GraphQL all users
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { allUsers {name email} }"
}

### GraphQL all accounts
POST http://localhost:8080/graphql
Content-Type: application/json

{
    "query": "query { allAccounts {name} }"
}

### GraphQL user audit
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { userAudit(userGuid: \"dea1db4a-38f0-447d-a974-2a81dea60955\") }"
}

### GraphQL users since
POST http://localhost:8080/graphql
Content-Type: application/json

{
  "query": "query { usersSince(date: \"2023-01-01T01:01:01\"){name email} }"
}
